{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Design example of a concrete beam. Define geometry, loads, material, calculate, get results."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Launch AxisVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from axisvm.com.client import start_AxisVM\n",
    "\n",
    "axisvm_application = start_AxisVM(visible=True, daemon=True, join=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import axisvm.com.tlb as axtlb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a new model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "axisvm_model_id = axisvm_application.Models.New()\n",
    "axisvm_model = axisvm_application.Models.Item[axisvm_model_id]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a material"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "axisvm_model.Settings.NationalDesignCode = axtlb.ndcEuroCode\n",
    "concrete_material_id = axisvm_model.Materials.AddFromCatalog(axtlb.ndcEuroCode, \"C16/20\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create a cross section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "section_id = axisvm_model.CrossSections.AddRectangular(\n",
    "    \"section\", 0.1, 0.15, axtlb.cspOther\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create the geometry"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the nodes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 2)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "node_id_1 = axisvm_model.Nodes.AddWithDOF(0, 0, 0, axtlb.dofFrameXZ)\n",
    "node_id_2 = axisvm_model.Nodes.AddWithDOF(4, 0, 0, axtlb.dofFrameXZ)\n",
    "node_id_1, node_id_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define the line of the beam\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "line_id = axisvm_model.Lines.Add(node_id_1, node_id_2, axtlb.lgtStraightLine)[-1]\n",
    "line_id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Create the concrete member"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "member_id = axisvm_model.Members.Add([line_id])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "member = axisvm_model.Members.Item[member_id]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "beam_id = member.DefineAsBeam(concrete_material_id, section_id, section_id)[-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the supports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RStiffnesses at 0x21b5f00d840>,\n",
       " <comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RNonLinearity at 0x21b5f047a40>,\n",
       " <comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RResistances at 0x21b1a6887c0>,\n",
       " 2]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "springleft = axtlb.RStiffnesses(x=1e12, y=1e12, z=1e12, xx=0, yy=0, zz=0)\n",
    "springright = axtlb.RStiffnesses(x=1e12, y=1e12, z=1e12, xx=0, yy=0, zz=0)\n",
    "RNonLinearity = axtlb.RNonLinearity(\n",
    "    x=axtlb.lnlTensionAndCompression,\n",
    "    y=axtlb.lnlTensionAndCompression,\n",
    "    z=axtlb.lnlTensionAndCompression,\n",
    "    xx=axtlb.lnlTensionAndCompression,\n",
    "    yy=axtlb.lnlTensionAndCompression,\n",
    "    zz=axtlb.lnlTensionAndCompression,\n",
    ")\n",
    "RResistances = axtlb.RResistances(x=0, y=0, z=0, xx=0, yy=0, zz=0)\n",
    "axisvm_model.NodalSupports.AddNodalGlobal(\n",
    "    springleft, RNonLinearity, RResistances, node_id_1\n",
    ")\n",
    "axisvm_model.NodalSupports.AddNodalGlobal(\n",
    "    springright, RNonLinearity, RResistances, node_id_2\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define loads"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Permanent load group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "group_id = axisvm_model.LoadGroups.Add(\n",
    "    \"Permanent\", axtlb.lgtPermanent, True, axtlb.gctAdditive\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "load_case_id = axisvm_model.LoadCases.AddWithGroup(\"G\", axtlb.lctStandard, group_id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "axisvm_model.Loads.AddBeamSelfWeight(line_id, load_case_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Incidental load group 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "group_id = axisvm_model.LoadGroups.Add(\n",
    "    \"Incidental 1\", axtlb.lgtIncidental, True, axtlb.gctExclusive\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RLoadBeamConcentrated at 0x21b1a688740>,\n",
       " 2]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_case_id = axisvm_model.LoadCases.AddWithGroup(\"LC1\", axtlb.lctStandard, group_id)\n",
    "\n",
    "load = axtlb.RLoadBeamConcentrated(\n",
    "    LoadCaseId=load_case_id,\n",
    "    LineId=line_id,\n",
    "    Fgz=-1.0,\n",
    "    Position=-0.3,\n",
    "    SystemGLR=axtlb.sysGlobal,\n",
    ")\n",
    "\n",
    "axisvm_model.Loads.AddBeamConcentrated(load)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RLoadBeamConcentrated at 0x21b1a688c40>,\n",
       " 3]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_case_id = axisvm_model.LoadCases.AddWithGroup(\"LC2\", axtlb.lctStandard, group_id)\n",
    "\n",
    "load = axtlb.RLoadBeamConcentrated(\n",
    "    LoadCaseId=load_case_id,\n",
    "    LineId=line_id,\n",
    "    Fgz=-10.0,\n",
    "    Position=-0.6,\n",
    "    SystemGLR=axtlb.sysGlobal,\n",
    ")\n",
    "\n",
    "axisvm_model.Loads.AddBeamConcentrated(load)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Incidental load group 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "group_id = axisvm_model.LoadGroups.Add(\n",
    "    \"Incidental 2\", axtlb.lgtIncidental, True, axtlb.gctExclusive\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RLoadBeamDistributed at 0x21b1a688f40>,\n",
       " 4]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_case_id = axisvm_model.LoadCases.AddWithGroup(\"LC3\", axtlb.lctStandard, group_id)\n",
    "\n",
    "load = axtlb.RLoadBeamDistributed(\n",
    "    LoadCaseId=load_case_id,\n",
    "    LineId=line_id,\n",
    "    qz1=-1.0,\n",
    "    qz2=-1.0,\n",
    "    Position1=0,\n",
    "    Position2=-0.5,\n",
    "    SystemGLR=axtlb.sysGlobal,\n",
    ")\n",
    "\n",
    "axisvm_model.Loads.AddBeamDistributed(load)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RLoadBeamDistributed at 0x21b1a3611c0>,\n",
       " 5]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "load_case_id = axisvm_model.LoadCases.AddWithGroup(\"LC4\", axtlb.lctStandard, group_id)\n",
    "\n",
    "load = axtlb.RLoadBeamDistributed(\n",
    "    LoadCaseId=load_case_id,\n",
    "    LineId=line_id,\n",
    "    qz1=-1.0,\n",
    "    qz2=-1.0,\n",
    "    Position1=-0.5,\n",
    "    Position2=-1.0,\n",
    "    SystemGLR=axtlb.sysGlobal,\n",
    ")\n",
    "axisvm_model.Loads.AddBeamDistributed(load)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Save the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file_path = 'model.axs'\n",
    "axisvm_model.SaveToFile(file_path, False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "axisvm_model.Calculation.LinearAnalysis(axtlb.cuiNoUserInteractionWithAutoCorrectNoShow)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Take a screenshot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<PIL.BmpImagePlugin.DibImageFile image mode=RGB size=1379x898>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "axisvm_model.View = axtlb.vFront\n",
    "axisvm_model.FitInView()\n",
    "\n",
    "# turn off the grid\n",
    "GridOptions = axtlb.RGridOptions(DisplayGrid=False)\n",
    "axisvm_model.Settings.SetGridOptions(GridOptions)\n",
    "\n",
    "WriteValuesTo = axtlb.RWriteValuesTo(\n",
    "    Nodes=True,\n",
    "    Lines=True,\n",
    "    MinMaxOnly=True\n",
    ")\n",
    "\n",
    "BasicDispParams = axtlb.RBasicDisplayParameters_V153(\n",
    "    ResultComponent=axtlb.rc_d_eZ,\n",
    "    Scale=1.0,\n",
    "    DisplayMode=axtlb.dmDiagramFilled,\n",
    "    DisplayShape=axtlb.dsUndeformed,\n",
    "    WriteValuesTo=WriteValuesTo\n",
    ")\n",
    "\n",
    "ExtDispParams = axtlb.RExtendedDisplayParameters_V153(\n",
    "    BasicDispParams=BasicDispParams,\n",
    "    DisplayAnalysisType=axtlb.datLinear,\n",
    "    ResultType=axtlb.rtLoadCase\n",
    ")\n",
    "\n",
    "load_case_id = 3\n",
    "axisvm_model.Windows.SetStaticDisplayParameters_V153(1, ExtDispParams, load_case_id, [])\n",
    "\n",
    "axisvm_model.Windows.ReDraw()\n",
    "axisvm_application.BringToFront()\n",
    "axisvm_model.Windows[1].screenshot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'design_parameters = axtlb.RPartialRCBeamDesignParameters(\\n    RRCBeamCrossSections = axtlb.RRCBeamCrossSections(\\n        StartSection = axtlb.RRCBeamSection(\\n            bw = 20.0,\\n            h = 40.0,\\n            hf = 10.0,\\n            beff = 40.0\\n        ),\\n        EndSection = axtlb.RRCBeamSection(\\n            bw = 20.0,\\n            h = 40.0,\\n            hf = 10.0,\\n            beff = 40.0\\n        )\\n    ),\\n    RRCBeamSupports = axtlb.RRCBeamSupports(\\n        StartSupport = axtlb.RRCBeamSupport(\\n            OverWrite = True,\\n            ActualHalfWidth = 2.0,\\n            TheoreticalHalfWidth = 2.0,\\n            ShearReduction = True\\n        ),\\n        EndSupport = axtlb.RRCBeamSupport(\\n            OverWrite = True,\\n            ActualHalfWidth = 2.0,\\n            TheoreticalHalfWidth = 2.0,\\n            ShearReduction = True\\n        )\\n    )\\n)\\n\\naxisvm_model.RCBeamDesign.AddMembers([member_id], [design_parameters])'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"design_parameters = axtlb.RPartialRCBeamDesignParameters(\n",
    "    RRCBeamCrossSections = axtlb.RRCBeamCrossSections(\n",
    "        StartSection = axtlb.RRCBeamSection(\n",
    "            bw = 20.0,\n",
    "            h = 40.0,\n",
    "            hf = 10.0,\n",
    "            beff = 40.0\n",
    "        ),\n",
    "        EndSection = axtlb.RRCBeamSection(\n",
    "            bw = 20.0,\n",
    "            h = 40.0,\n",
    "            hf = 10.0,\n",
    "            beff = 40.0\n",
    "        )\n",
    "    ),\n",
    "    RRCBeamSupports = axtlb.RRCBeamSupports(\n",
    "        StartSupport = axtlb.RRCBeamSupport(\n",
    "            OverWrite = True,\n",
    "            ActualHalfWidth = 2.0,\n",
    "            TheoreticalHalfWidth = 2.0,\n",
    "            ShearReduction = True\n",
    "        ),\n",
    "        EndSupport = axtlb.RRCBeamSupport(\n",
    "            OverWrite = True,\n",
    "            ActualHalfWidth = 2.0,\n",
    "            TheoreticalHalfWidth = 2.0,\n",
    "            ShearReduction = True\n",
    "        )\n",
    "    )\n",
    ")\n",
    "\n",
    "axisvm_model.RCBeamDesign.AddMembers([member_id], [design_parameters])\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\n",
    "    old_beam_design_parameters,  # an instance of RRCBeamDesignParameters\n",
    "    old_design_code_parameters,  # an instance of RRCBeamDesignParameters_EC\n",
    ") = axisvm_model.RCBeamDesign.GetDesignParameters(\n",
    "    record_type=axtlb.RRCBeamDesignParameters_EC\n",
    ")\n",
    "\n",
    "old_beam_design_parameters.Dmax, old_design_code_parameters.TopSurface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<comtypes.gen._0AA46C32_04EF_46E3_B0E4_D2DA28D0AB08_0_16_100.RRCBeamDesignParameters at 0x21b18155d40>,\n",
       " 1]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "rebar_steel_index = axisvm_model.RebarSteelGrades.AddFromCatalog(axtlb.ndcEuroCode, \"B500A\")\n",
    "\n",
    "beam_design_parameters = axtlb.RRCBeamDesignParameters(\n",
    "    ConcreteMaterial=concrete_material_id,\n",
    "    Dmax=0.0016,\n",
    "    RebarMaterial=rebar_steel_index,\n",
    "    StirrupMaterial=rebar_steel_index,\n",
    "    StirrupDiameter=0.0008,\n",
    "    StirrupLegs=2,\n",
    "    Shape=axtlb.rcbsRectangle,\n",
    "    c_bottom=0.0015,\n",
    "    c_top=0.0015,\n",
    "    ds_bottom=0.0016,\n",
    "    ds_top=0.0016,\n",
    "    TakeConcTensileStrengthNL=True,\n",
    "    UsefctmflNL=True,\n",
    "    ShrinkageEpsNL=0.585,\n",
    ")\n",
    "\n",
    "design_code_parameters = axtlb.RRCBeamDesignParameters_EC(\n",
    "    VariableAngleTrussMethod = True,\n",
    "    Theta = -45*math.pi/180,  # in radians\n",
    "    fse = 1.0,\n",
    "    ApplyMinimumCover=True,\n",
    "    CrackWidthCheck=True,\n",
    "    MaxCrackWidth_Bottom=0.0003,  # in metres\n",
    "    MaxCrackWidth_Top=0.0003,  # in metres\n",
    "    TakeConcTensileStrength=True,\n",
    "    ShortTerm=True,\n",
    "    Deflection_Beam_L_div=300.0,\n",
    "    Deflection_Cantilever_L_div=500.0,\n",
    "    TopSurface=axtlb.ecClassX0,\n",
    "    BottomSurface=axtlb.ecClassX0,\n",
    "    StructClass=axtlb.scS1,\n",
    "    SeismicZone=axtlb.rcbsecSeismicH,\n",
    "    PlasticHinges=axtlb.RRCBeamPlasticHinges(\n",
    "        EnablePlasticHinges=False,\n",
    "        Hinge1=axtlb.RRCBeamPlasticHingeParams(\n",
    "            Active=False,\n",
    "            AppliedReinforcement=False,\n",
    "            As_Bottom=0.0003,\n",
    "            As_Top=0.0003,\n",
    "            Depth_Bottom=0.0003,\n",
    "            Depth_Top=0.0003,\n",
    "            ),\n",
    "        Hinge2=axtlb.RRCBeamPlasticHingeParams(\n",
    "            Active=False,\n",
    "            AppliedReinforcement=False,\n",
    "            As_Bottom=0.0003,\n",
    "            As_Top=0.0003,\n",
    "            Depth_Bottom=0.0003,\n",
    "            Depth_Top=0.0003,\n",
    "            ),\n",
    "        Pos_Hinge1 = 1.0,\n",
    "        Pos_Hinge2 = 2.0,\n",
    "        MinRebarDiameter=0.0008,\n",
    "        GammaRd=1.5,\n",
    "    )\n",
    ")\n",
    "\n",
    "axisvm_model.RCBeamDesign.SetDesignParameters(\n",
    "    beam_design_parameters, design_code_parameters\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The parameter 'Creep' is missing from the documentation.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "COMError",
     "evalue": "(-2147418113, 'Catastrophic failure', (\"Access violation at address 0000000001EBBDB4 in module 'AxisVM_x64.exe'. Read of address 0000000000000000\", 'AxisVM.AxisVMRCBeamDesign', None, 0, None))",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mCOMError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[32], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[43maxisvm_model\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mRCBeamDesign\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mCalculate\u001b[49m\u001b[43m(\u001b[49m\n\u001b[0;32m      2\u001b[0m \u001b[43m    \u001b[49m\u001b[43maxtlb\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrtCritical\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      3\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m      4\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[0;32m      5\u001b[0m \u001b[43m    \u001b[49m\u001b[43maxtlb\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43matLinearStatic\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m      6\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\n\u001b[0;32m      7\u001b[0m \u001b[43m)\u001b[49m\n",
      "\u001b[1;31mCOMError\u001b[0m: (-2147418113, 'Catastrophic failure', (\"Access violation at address 0000000001EBBDB4 in module 'AxisVM_x64.exe'. Read of address 0000000000000000\", 'AxisVM.AxisVMRCBeamDesign', None, 0, None))"
     ]
    }
   ],
   "source": [
    "axisvm_model.RCBeamDesign.Calculate(\n",
    "    axtlb.rtCritical,\n",
    "    0,\n",
    "    0,\n",
    "    axtlb.atLinearStatic,\n",
    "    True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#axisvm_application.Quit()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".axisvm",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
